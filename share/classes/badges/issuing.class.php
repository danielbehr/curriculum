<?php
/**
 * This file is part of curriculum - http://www.joachimdieterich.de
 * 
 * @package core
 * @filename issuing.class.php
 * @copyright 2015 joachimdieterich
 * @author joachimdieterich
 * @date 2015.04.01 10:36
 * @license: 
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by  
 * the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
 *                                                                       
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of        
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  GNU General Public License for more details:
 *                                                                       
 * http://www.gnu.org/copyleft/gpl.html      
 */

class Issuing {
    /**
     * Used to identify badge in API endpoints (auto-generated)
     * @var string 
     */
    public $slug;
    
    /**
     * Display name
     * @var string 
     */
    public $name; 
    
    /**
     * Short tagline description
     * @var string 
     */
    public $strapline; 
    
    /**
     * Description for potential earners
     * @var string 
     */
    public $earnerDescription;
    
    /**
     * Description for viewers of badge e.g. college admin or employer
     * @var string 
     */
    public $consumerDescription;
    
    /**
     * earner email
     * @var string 
     */
    public $email;
    
    /**
     * optional expiry date
     * @var timestamp
     */
    public $expires; 
    
    /**
     * API will generate
     * @var timestamp
     */
    public $issuedOn;
    
    /**
     * if badge is issued using claim code
     * @var claim code
     */
    public $claimCode; 
    
    /**
     * location of issued badge assertion, generated by API
     * @var URL
     */
    public $assertionUrl;
     
    /**
     * API endpoints return badge issued along with instances
     * @var badge
     */
    public $badge; 
    
    
    public function retrieveBadgeInstances(){}
    
    /**
     * Retrieve a specific instance of a badge.
     * You can retrieve instances of badges awarded to a particular email address, 
     * for systems, issuers, programs and badges.
     * 
     * Expected request
     * GET /systems/:s_slug/instances/:$this->email
     * GET /systems/:s_slug/issuers/:i_slug/instances/:$this->email
     * GET /systems/:s_slug/issuers/:i_slug/programs/:p_slug/instances/:$this->email
     * 
     * GET /systems/:s_slug/badges/:b_slug/instances/:$this->email
     * GET /systems/:s_slug/issuers/:i_slug/badges/:b_slug/instances/:$this->email
     * GET /systems/:s_slug/issuers/:i_slug/programs/:p_slug/badges/:b_slug/instances/:$this->email
     * 
     * @param string $s_slug
     * @param string $b_slug
     * @param string $i_slug
     * @param string $p_slug
     * 
     * @return array 
     */
    public function retrieveSpecificInstance($s_slug, $b_slug, $i_slug = NULL, $p_slug = NULL){
        
        
    }
    
    /**
     * To actually issue (or "award") a badge to an earner in BadgeKit API, 
     * you create a badge instance. A badge instance is an awarded badge, 
     * issued to a specific earner.
     * 
     * Expected request
     * POST /systems/:s_slug/badges/:b_slug/instances
     * POST /systems/:s_slug/issuers/:i_slug/badges/:b_slug/instances
     * POST /systems/:s_slug/issuers/:i_slug/programs/:p_slug/badges/:b_slug/instances
     * 
     * @param string $s_slug
     * @param string $b_slug
     * @param string $i_slug
     * @param string $p_slug
     * 
     * @return array
     */
    public function createBadgeInstance($s_slug, $b_slug, $i_slug = NULL, $p_slug = NULL){
        $con = new BadgekitConnection();
        $con->setMethod('POST');        // Set up the JSON Web Token
        
        // Set up Path
        if (is_null($i_slug) AND is_null($p_slug)){     //Request: POST /systems/:s_slug/badges/:b_slug/instances
            $con->setPath('/systems/' . $s_slug . '/badges/'. $b_slug . '/instances');
        }
        if (!is_null($i_slug) AND is_null($p_slug)){    //Request: POST /systems/:s_slug/issuers/:i_slug/badges/:b_slug/instances
            $con->setPath('/systems/' . $s_slug . '/issuers/'. $i_slug .'/badges/'. $b_slug . '/instances');
        }
        if (!is_null($i_slug) AND !is_null($p_slug)){    //Request: POST /systems/:s_slug/issuers/:i_slug/programs/:p_slug/badges/:b_slug/instances
            $con->setPath('/systems/' . $s_slug . '/issuers/'. $i_slug .'/programs/'. $p_slug .'/badges/'. $b_slug . '/instances');
        }
        $data = json_encode($this); // generate payload
        $con->setPost($data);
        $con->connect();
        return $this->response;
    }
    
    /**
     * Delete a badge instance within a system, issuer or program context.
     * 
     * Expected request 
     * DELETE /systems/:s_slug/badges/:b_slug/instances/:$this->email
     * DELETE /systems/:s_slug/issuers/:i_slug/badges/:b_slug/instances/:$this->email
     * DELETE /systems/:s_slug/issuers/:i_slug/programs/:p_slug/badges/:b_slug/instances/:$this->email
     * 
     * @return array
     */
    public function deleteInstance($s_slug, $b_slug, $i_slug = NULL, $p_slug = NULL){
        $con = new BadgekitConnection();
        $con->setMethod('DELETE');          // Set up the JSON Web Token
        
        // Set up Path
        if (is_null($i_slug) AND is_null($p_slug)){     //Request: DELETE /systems/:s_slug/badges/:b_slug/instances/:$this->email
            $con->setPath('/systems/' . $s_slug . '/badges/'. $b_slug . '/instances/'. $this->email);
        }
        if (!is_null($i_slug) AND is_null($p_slug)){    //Request: DELETE /systems/:s_slug/issuers/:i_slug/badges/:b_slug/instances/:$this->email
            $con->setPath('/systems/' . $s_slug . '/issuers/'. $i_slug .'/badges/'. $b_slug . '/instances/'. $this->email);
        }
        if (!is_null($i_slug) AND !is_null($p_slug)){    //Request: DELETE /systems/:s_slug/issuers/:i_slug/programs/:p_slug/badges/:b_slug/instances/:$this->email
            $con->setPath('/systems/' . $s_slug . '/issuers/'. $i_slug .'/programs/'. $p_slug .'/badges/'. $b_slug . '/instances/'. $this->email);
        }
        $con->connect();
        return $this->response;
    }
}